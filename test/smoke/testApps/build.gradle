apply plugin: 'base'

ext {
    dependencyContainers = []
}

subprojects {
    apply plugin: 'java'

    repositories {
        mavenCentral()
        mavenLocal() // this is needed to resolve aiAgentJar transitive dependencies, at least in gRPC:extractIncludeProto
    }

    sourceSets {
        smokeTest {
            java {
                // compileClasspath += main.output + test.output
                // runtimeClasspath += main.output + test.output
                srcDir file('src/smokeTest/java')
            }
            resources.srcDir file('src/smokeTest/resources')
        }
    }

    configurations {
        smokeTestCompile.extendsFrom testCompile
        smokeTestRuntime.extendsFrom testRuntime
    }

    dependencies {
        compileOnly aiAgentJar // this is just to force building the agent first

        smokeTestCompile project(':test:smoke:framework:testCore')
        smokeTestCompile project(':test:smoke:framework:utils')
        smokeTestCompile 'org.hamcrest:hamcrest-core:1.3'
        smokeTestCompile 'org.hamcrest:hamcrest-library:1.3'
        smokeTestCompile 'junit:junit:4.12'

        testImplementation project(':test:smoke:framework:testCore') // not necessary; vs code bug workaround
        testImplementation project(':test:smoke:framework:utils')
        testImplementation 'junit:junit:4.12'
    }

    // This task addresses the issue of dependency containers not existing when the app runs and the test fails due to timeout.
    // FIXME a temporary measure until we can get the list of containers from the test classes themselves.
    task pullDependencyContainers() {
        group 'Smoke Test'
        description 'Pulls dependency containers from docker hub'
        doLast {
            dependencyContainers.each { dc ->
                logger.info "Pulling $dc..."
                exec {
                    executable 'docker'
                    args 'pull', "$dc"
                }
            }
        }
        onlyIf { !dependencyContainers.empty }
    }

    task smokeTest(type: Test) {
        group 'Smoke Test'
        description 'Runs all smoke tests'

        // TODO this adds the whole tree rooted at :appServers. Could this depend on :appServers which depends on :appServers:*:build?
        dependsOn project(':test:smoke:appServers').getTasksByName('buildDockerImage', true)
        dependsOn assemble
        dependsOn pullDependencyContainers
        mustRunAfter assemble

        testClassesDirs = sourceSets.smokeTest.output.classesDirs

        classpath = sourceSets.smokeTest.runtimeClasspath
        outputs.upToDateWhen { false }
    }

    processSmokeTestResources {
        group 'Smoke Test'
        description = "Copies test app WARs and shared resources into smoke test resources folder"
        outputs.upToDateWhen { false }
        dependsOn assemble
        doFirst {
            def testAppFile = testAppArtifactDir.file(testAppArtifactFilename)
            if (!testAppFile.get().asFile.exists()) {
                throw new GradleException("Missing $testAppArtifactFilename from $testAppArtifactDir")
            }
        }
        doLast {
            project.copy {
                from testAppArtifactDir
                into processSmokeTestResources.destinationDir
                include "$testAppArtifactFilename"
            }
            project.copy {
                from sharedResourcesDir
                into processSmokeTestResources.destinationDir
            }
            def testInfoProps = new File(processSmokeTestResources.destinationDir, "testInfo.properties")
            def props = new Properties()
            props.setProperty("ai.smoketest.testAppWarFile", "$testAppArtifactFilename")
            testInfoProps.withWriter { props.store((Writer)it, "information needed for test") }
        }
    }

    tasks.withType(Test) {
        reports.html.destination = file("${reporting.baseDir}/${name}")

        testLogging {
            events 'FAILED', 'PASSED', 'SKIPPED', 'STANDARD_OUT', 'STANDARD_ERROR', 'STARTED'
            exceptionFormat 'FULL'
            showExceptions true
            showCauses true
            showStackTraces true
        }

        doLast {
            println "$it.name complete. HTML reports: $reports.html.destination"
        }
    }
}

tasks.register("listTestApps") {
    group = "Help"
    description = "List all available test apps"
    doFirst {
        subprojects.collect { it.path }
                   .each { println it }
    }
}
